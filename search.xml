<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>bootstrap所有服务</title>
      <link href="/2018/07/08/bootstrap/"/>
      <url>/2018/07/08/bootstrap/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;bootstrap是整个框架的引导,加载了必须的服务，文件等。</p><h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $bootstrappers = [</span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\DetectEnvironment'</span>, <span class="comment">//env环境变量处理类</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\LoadConfiguration'</span>, <span class="comment">//config配置文件处理类</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\ConfigureLogging'</span>, <span class="comment">//系统日志处理类,报错等</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\HandleExceptions'</span>, <span class="comment">//异常处理类</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\RegisterFacades'</span>, <span class="comment">//门面处理类</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\RegisterProviders'</span>, <span class="comment">// 注册config.app 中所有服务提供者</span></span><br><span class="line">    <span class="string">'Illuminate\Foundation\Bootstrap\BootProviders'</span>, <span class="comment">//启用 已注册的所有服务</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers()); <span class="comment">// 即传入$this-&gt;bootstrappers</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="bootstrapWith"><a href="#bootstrapWith" class="headerlink" title="bootstrapWith"></a>bootstrapWith</h4><p>通过容器make方法获取上文数组中的实例,并执行其bootstrap(app)方法,传入参数为app实例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapWith</span><span class="params">(array $bootstrappers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;hasBeenBootstrapped = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($bootstrappers <span class="keyword">as</span> $bootstrapper) &#123;</span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在bootstrapWith执行完成之后,它的整个流程会在events(Dispatcher类)的sorted属性中有详细记载,如下<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="formula">$sorted = [</span></span><br><span class="line"><span class="formula">"Illuminate<span class="tag">\<span class="name">Events</span></span><span class="tag">\<span class="name">EventServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Routing</span></span><span class="tag">\<span class="name">RoutingServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">DetectEnvironment</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">DetectEnvironment</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">LoadConfiguration</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">LoadConfiguration</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">ConfigureLogging</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">ConfigureLogging</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">HandleExceptions</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">HandleExceptions</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">RegisterFacades</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">RegisterFacades</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">RegisterProviders</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Auth</span></span><span class="tag">\<span class="name">AuthServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Routing</span></span><span class="tag">\<span class="name">ControllerServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Cookie</span></span><span class="tag">\<span class="name">CookieServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Database</span></span><span class="tag">\<span class="name">DatabaseServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Encryption</span></span><span class="tag">\<span class="name">EncryptionServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Filesystem</span></span><span class="tag">\<span class="name">FilesystemServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Pagination</span></span><span class="tag">\<span class="name">PaginationServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Session</span></span><span class="tag">\<span class="name">SessionServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">Validation</span></span><span class="tag">\<span class="name">ValidationServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "Illuminate<span class="tag">\<span class="name">View</span></span><span class="tag">\<span class="name">ViewServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "App<span class="tag">\<span class="name">Providers</span></span><span class="tag">\<span class="name">AppServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "App<span class="tag">\<span class="name">Providers</span></span><span class="tag">\<span class="name">AuthServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "App<span class="tag">\<span class="name">Providers</span></span><span class="tag">\<span class="name">EventServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "App<span class="tag">\<span class="name">Providers</span></span><span class="tag">\<span class="name">RouteServiceProvider</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">RegisterProviders</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapping: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">BootProviders</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">            "bootstrapped: Illuminate<span class="tag">\<span class="name">Foundation</span></span><span class="tag">\<span class="name">Bootstrap</span></span><span class="tag">\<span class="name">BootProviders</span></span>" =&gt; []</span></span><br><span class="line"><span class="formula">  ]</span></span><br></pre></td></tr></table></figure></p><h4 id="DetectEnvironment"><a href="#DetectEnvironment" class="headerlink" title="DetectEnvironment"></a>DetectEnvironment</h4><p>环境变量配置。使用插件 vlucas/phpdotenv<br>读取.env 文件,将配置写入$_ENV, 和 $_SERVER 变量中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DetectEnvironment 中的bootstrap 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Dotenv::load($app-&gt;environmentPath(), $app-&gt;environmentFile());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认设置环境为生产环境</span></span><br><span class="line">    $app-&gt;detectEnvironment(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> env(<span class="string">'APP_ENV'</span>, <span class="string">'production'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dotenv中的load 和 setEnvironmentVariable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($path, $file = <span class="string">'.env'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .......</span><br><span class="line">    $lines = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); <span class="comment">//跳过空行</span></span><br><span class="line">    <span class="keyword">foreach</span> ($lines <span class="keyword">as</span> $line) &#123;</span><br><span class="line">        <span class="comment">//忽略#号注释</span></span><br><span class="line">        <span class="keyword">if</span> (strpos(trim($line), <span class="string">'#'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (strpos($line, <span class="string">'='</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">static</span>::setEnvironmentVariable($line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setEnvironmentVariable</span><span class="params">($name, $value = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($name, $value) = <span class="keyword">static</span>::normaliseEnvironmentVariable($name, $value);</span><br><span class="line">    ....... <span class="comment">// 判断环境变量是否可以覆盖重写</span></span><br><span class="line">    putenv(<span class="string">"$name=$value"</span>);</span><br><span class="line">    $_ENV[$name] = $value;</span><br><span class="line">    $_SERVER[$name] = $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="LoadConfiguration"><a href="#LoadConfiguration" class="headerlink" title="LoadConfiguration"></a>LoadConfiguration</h4><p>框架Config读取配置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $items = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists($cached = $app-&gt;getCachedConfigPath())) &#123;</span><br><span class="line">        $items = <span class="keyword">require</span> $cached;</span><br><span class="line"></span><br><span class="line">        $loadedFromCache = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $app-&gt;instance(<span class="string">'config'</span>, $config = <span class="keyword">new</span> Repository($items));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>($loadedFromCache)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadConfigurationFiles($app, $config);</span><br><span class="line">    &#125;</span><br><span class="line">    date_default_timezone_set($config[<span class="string">'app.timezone'</span>]);<span class="comment">// 时区</span></span><br><span class="line"></span><br><span class="line">    mb_internal_encoding(<span class="string">'UTF-8'</span>); <span class="comment">// 编码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>config 最终对应为 Repository类。其items 属性保存了config 目录下的文件名(key)、配置内容(value)组成的数组键值对。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Repository(<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">items: <span class="keyword">array</span>:<span class="number">7</span> [▼</span><br><span class="line">    <span class="string">"app"</span> =&gt; <span class="keyword">array</span>:<span class="number">10</span> [▶]</span><br><span class="line">    <span class="string">"auth"</span> =&gt; <span class="keyword">array</span>:<span class="number">5</span> [▼</span><br><span class="line"><span class="string">"driver"</span> =&gt; <span class="string">"eloquent"</span></span><br><span class="line"><span class="string">"model"</span> =&gt; <span class="string">"App\User"</span></span><br><span class="line"><span class="string">"table"</span> =&gt; <span class="string">"users"</span></span><br><span class="line"><span class="string">"password"</span> =&gt; <span class="keyword">array</span>:<span class="number">3</span> [▼</span><br><span class="line"><span class="string">"email"</span> =&gt; <span class="string">"auth.passwords.link"</span></span><br><span class="line"><span class="string">"table"</span> =&gt; <span class="string">"password_resets"</span></span><br><span class="line"><span class="string">"expire"</span> =&gt; <span class="number">10</span></span><br><span class="line">]</span><br><span class="line">      <span class="string">"remember_token_expire"</span> =&gt; <span class="number">14400</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="string">"cache"</span> =&gt; <span class="keyword">array</span>:<span class="number">3</span> [▶]</span><br><span class="line">    <span class="string">"database"</span> =&gt; <span class="keyword">array</span>:<span class="number">5</span> [▶]</span><br><span class="line">    <span class="string">"mail"</span> =&gt; <span class="keyword">array</span>:<span class="number">9</span> [▶]</span><br><span class="line">    <span class="string">"session"</span> =&gt; <span class="keyword">array</span>:<span class="number">12</span> [▶]</span><br><span class="line">    <span class="string">"view"</span> =&gt; <span class="keyword">array</span>:<span class="number">2</span> [▶]</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="ConfigureLogging"><a href="#ConfigureLogging" class="headerlink" title="ConfigureLogging"></a>ConfigureLogging</h4><p>日志写入配置。使用monolog/monolog拓展。为容器添加log 对应的绑定实例(Monolog)，并设置默认写入路径<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $log = <span class="keyword">$this</span>-&gt;registerLogger($app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($app-&gt;hasMonologConfigurator()) &#123;</span><br><span class="line">        call_user_func(</span><br><span class="line">            $app-&gt;getMonologConfigurator(), $log-&gt;getMonolog()</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//为$log,即Monolog设日志内容的写入路径,默认为storage/logs/laravel.log</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;configureHandlers($app, $log);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerLogger</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $app-&gt;instance(<span class="string">'log'</span>, $log = <span class="keyword">new</span> Writer(</span><br><span class="line">        <span class="keyword">new</span> Monolog($app-&gt;environment()), $app[<span class="string">'events'</span>])</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="HandleExceptions"><a href="#HandleExceptions" class="headerlink" title="HandleExceptions"></a>HandleExceptions</h4><p>自定义异常处理Handler<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line"></span><br><span class="line">    error_reporting(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]); <span class="comment">// 错误处理</span></span><br><span class="line"></span><br><span class="line">    set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]); <span class="comment">//抛出异常处理</span></span><br><span class="line"></span><br><span class="line">    register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleShutdown'</span>]); <span class="comment">//程序异常终止处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! $app-&gt;environment(<span class="string">'testing'</span>)) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="string">'Off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="RegisterFacades"><a href="#RegisterFacades" class="headerlink" title="RegisterFacades"></a>RegisterFacades</h4><p>注册门面类 ,通过class_alias 为一个类创建别名<br><blockquote><footer><strong>class_alias</strong><cite><a href="http://php.net/manual/zh/function.class-alias.php" target="_blank" rel="noopener">php.net/manual/zh/function.class-alias.php</a></cite></footer></blockquote><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Facade::clearResolvedInstances();</span><br><span class="line"></span><br><span class="line">    Facade::setFacadeApplication($app); <span class="comment">//为Facede 注入aPP实例</span></span><br><span class="line">   </span><br><span class="line">    AliasLoader::getInstance($app-&gt;make(<span class="string">'config'</span>)-&gt;get(<span class="string">'app.aliases'</span>))-&gt;register();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">  spl_autoload_register([<span class="keyword">$this</span>, <span class="string">'load'</span>], <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function"> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;aliases[$alias])) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> class_alias(<span class="keyword">$this</span>-&gt;aliases[$alias], $alias);<span class="comment">//门面类实现方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="RegisterProviders"><a href="#RegisterProviders" class="headerlink" title="RegisterProviders"></a>RegisterProviders</h4><p>读取config配置中的app.providers,对数组中所有进行注册<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $app-&gt;registerConfiguredProviders();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app类</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取bootstrap/cache/services.json缓存</span></span><br><span class="line">    $manifestPath = <span class="keyword">$this</span>-&gt;getCachedServicesPath();</span><br><span class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, $manifestPath))</span><br><span class="line">                -&gt;load(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ProviderRepository</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(array $providers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取服务注册清单</span></span><br><span class="line">    $manifest = <span class="keyword">$this</span>-&gt;loadManifest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;shouldRecompile($manifest, $providers)) &#123;</span><br><span class="line">        $manifest = <span class="keyword">$this</span>-&gt;compileManifest($providers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//触发加载的服务</span></span><br><span class="line">    <span class="keyword">foreach</span> ($manifest[<span class="string">'when'</span>] <span class="keyword">as</span> $provider =&gt; $events) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerLoadEvents($provider, $events);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($manifest[<span class="string">'eager'</span>] <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register(<span class="keyword">$this</span>-&gt;createProvider($provider)); <span class="comment">// 注册时,写入fire 记录</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//延迟加载的服务</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;addDeferredServices($manifest[<span class="string">'deferred'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kernel类handle方法</title>
      <link href="/2018/07/08/kernel-handle/"/>
      <url>/2018/07/08/kernel-handle/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;通过容器获取kernel实例,将request类传入kernel的handle方法,最终返回响应而这是一个极其漫长的过程,因为这个过程将整个框架所需的服务、文件全部初始化完成。</p><h4 id="kernel的handle方法"><a href="#kernel的handle方法" class="headerlink" title="kernel的handle方法"></a>kernel的handle方法</h4><p>随着这个方法执行完毕,整体框架的流程就完成90%了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//kernel的handle方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//在此过程中，所有异常都会通过Exceptions 直接抛出</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line">        <span class="comment">//通过发送请求，经路由处理，最终返回response</span></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">        $e = <span class="keyword">new</span> FatalThrowableError($e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发'kernel.handled'事件listener,如果存在的话</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'events'</span>]-&gt;fire(<span class="string">'kernel.handled'</span>, [$request, $response]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="sendRequestThroughRouter"><a href="#sendRequestThroughRouter" class="headerlink" title="sendRequestThroughRouter"></a>sendRequestThroughRouter</h4><p>重中之重的方法，分两个部分说<br>① $this-&gt;bootstrap();<br>① Pipeline管道;<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request); <span class="comment">//Reuqest 实例加入instances 数组中</span></span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap(); <span class="comment">//关键方法,几乎加载所有服务和文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管道类处理request </span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</span><br><span class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>request实例</title>
      <link href="/2018/07/08/request-instance/"/>
      <url>/2018/07/08/request-instance/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;通过index.php继续往下走, Request实例的初始化<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request</span> = Illuminate\Http\<span class="symbol">Request:</span><span class="symbol">:capture</span>()</span><br></pre></td></tr></table></figure><br>使用拓展 Symfony/Http-Foundation<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Request</span> <span class="title">as</span> <span class="title">SymfonyRequest</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">capture</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//允许请求方法重新,主要用于DELETE PUT方法的最终转换</span></span><br><span class="line">    <span class="keyword">static</span>::enableHttpMethodParameterOverride();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据php超级全局变量$_SERVER的数据,创建一个Request 类</span></span><br><span class="line">    $fromGlobals = SymfonyRequest::createFromGlobals(); </span><br><span class="line">    <span class="comment">//最终返回 Illuminate\Http\Request类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::createFromBase($fromGlobals); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>①设置enableHttpMethodParameterOverride = true， 因为框架在设置DELETE PUT 等请求时,实质是通过表单伪造完成的《input type=”hidden” name=”_method” value=”PUT”》<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;method) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = strtoupper(<span class="keyword">$this</span>-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'POST'</span> === <span class="keyword">$this</span>-&gt;method) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($method = <span class="keyword">$this</span>-&gt;headers-&gt;get(<span class="string">'X-HTTP-METHOD-OVERRIDE'</span>)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;method = strtoupper($method);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">self</span>::$httpMethodParameterOverride) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;method = strtoupper(<span class="keyword">$this</span>-&gt;request-&gt;get(<span class="string">'_method'</span>, <span class="keyword">$this</span>-&gt;query-&gt;get(<span class="string">'_method'</span>, <span class="string">'POST'</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>②$fromGlobals实质是SymfonyRequest类。<font color="#f56954">其属性值本身源于PHP自带的超级全局变量$_SERVER。</font></p><p>③最后是通过duplicate方法,将SymfonyRequest属性值复制到Illuminate\Http\Request类中,并最终返回。</p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Request实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Application初始化</title>
      <link href="/2018/07/07/app-instance/"/>
      <url>/2018/07/07/app-instance/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;之前已完成Application的自动引入,本篇分享下面这行代码的实现细节 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)   <span class="comment">//参数 basePath 为项目根目录的&lt;绝对路径&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders(); <span class="comment">//绑定基本服务（event router）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases(); <span class="comment">//设置容器别名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ($basePath) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath); <span class="comment">//设置基本项目的关键文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="注册基本绑定"><a href="#注册基本绑定" class="headerlink" title="注册基本绑定"></a>注册基本绑定</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);  <span class="comment">//使用单例模式,将静态属性instance 赋值为自身实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);<span class="comment">//将属性instances['app'] 赋值为自身实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'Illuminate\Container\Container'</span>, <span class="keyword">$this</span>); <span class="comment">//同上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册基本服务"><a href="#注册基本服务" class="headerlink" title="注册基本服务"></a>注册基本服务</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>)); <span class="comment">//注册事件服务, app实例作为参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));  <span class="comment">//注册路由服务  ,app实例作为参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="app的register方法"><a href="#app的register方法" class="headerlink" title="app的register方法"></a>app的register方法</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($provider, $options = [], $force = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (($registered = <span class="keyword">$this</span>-&gt;getProvider($provider)) &amp;&amp; ! $force) &#123;</span><br><span class="line">        <span class="keyword">return</span> $registered;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是字符串，则解析为对应的class实例</span></span><br><span class="line">    <span class="keyword">if</span> (is_string($provider)) &#123;</span><br><span class="line">        $provider = <span class="keyword">$this</span>-&gt;resolveProviderClass($provider); <span class="comment">// 即$provider = new $provider()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行服务提供者的注册方法</span></span><br><span class="line">    $provider-&gt;register();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($options <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">$this</span>[$key] = $value;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//将服务提供者标记为已注册</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;markAsRegistered($provider);</span><br><span class="line">    <span class="comment">//如果所有的服务已经启用(一个后续环节)之后,重新注册时，会执行该$provider的boot方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;booted) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bootProvider($provider);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $provider;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProvider</span><span class="params">($provider)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    $name = is_string($provider) ? $provider : get_class($provider);</span><br><span class="line">    <span class="comment">// Arr类(Illuminate\Support\Arr,以及Illuminate\Support\Str),是框架数组，字符串帮助函数的底层实现</span></span><br><span class="line">    <span class="comment">//由于这里使用first()方法,意味着只要找到数组中符合条件的第一项，就返回。注册同一个服务，返回最早注册的。</span></span><br><span class="line">    <span class="keyword">return</span> Arr::first(<span class="keyword">$this</span>-&gt;serviceProviders, <span class="function"><span class="keyword">function</span> <span class="params">($key, $value)</span> <span class="title">use</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $value <span class="keyword">instanceof</span> $name;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Event的register方法"><a href="#Event的register方法" class="headerlink" title="Event的register方法"></a>Event的register方法</h5><p>执行上文中 <strong>$provider-&gt;register()</strong> 方法，即执行new EventServiceProvider($this) 中的register()方法。<font color="#f56954">所有的服务提供者基本都是为当前服务绑定一个可以返回 真正执行者 (如这里的Dispatcher实例) 的闭包。服务的注册方法中一般会存在一个或多个绑定。</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//所有的服务提供者都会继承ServiceProvider,也就是都有一个特定属性app,即Application实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'events'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取分配器Dispatcher实例，并为该实例设置队列解析者</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> Dispatcher($app))-&gt;setQueueResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $app-&gt;make(<span class="string">'Illuminate\Contracts\Queue\Factory'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h5 id="singleton方法"><a href="#singleton方法" class="headerlink" title="singleton方法"></a>singleton方法</h5><p>&emsp;&emsp;容器singleton方法，<font color="#f56954">使用单例模式注册，即多次执行make(‘events’),返回的同一个实例</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span><span class="params">($abstract, $concrete = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;bind($abstract, $concrete, <span class="keyword">true</span>); <span class="comment">// 第三个参数true, 表示shared 共享</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前注册服务添加至bindings中</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete = null, $shared = false)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindings[$abstract] = compact(<span class="string">'concrete'</span>, <span class="string">'shared'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器中的make方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过singleton，shared = true, 之后make会之前返回已经实例化好的类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isShared($abstract)) &#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;instances[$abstract] = $object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Router的register方法"><a href="#Router的register方法" class="headerlink" title="Router的register方法"></a>Router的register方法</h5><p>RoutingServiceProvider的register方法一共有6个注册<br>&emsp;&emsp;registerRouter       &emsp;&emsp;&emsp;&emsp;&ensp;注册路由<br>&emsp;&emsp;registerUrlGenerator &emsp;&ensp;url 生成器<br>&emsp;&emsp;registerRedirector   &emsp;&emsp;&ensp;&nbsp;路由重定向<br>&emsp;&emsp;registerResponseFactory 响应<br>&emsp;&emsp;<del>registerPsrRequest   &emsp;&nbsp;框架底层本身不存在绑定所需返回类,需要特有拓展</del><br>&emsp;&emsp;<del>registerPsrRespons   &emsp;&nbsp;框架底层本身不存在绑定所需返回类</del></p><p>这里只分析registerRouter,关注点放在<font color="#f56954">$this-&gt;app[‘router’]</font> 和 <font color="#f56954">share()方法</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'router'</span>] = <span class="keyword">$this</span>-&gt;app-&gt;share(<span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Router($app[<span class="string">'events'</span>], $app);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//又会触发build, 执行所绑定的闭包 </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;$this-&gt;app 是Application类,因为该类implements了PHP自带的ArrayAccess接口,所以支持对象以数组方式使用。$this-&gt;app[key] = value，这种赋值运算会触发offsetSet方法(最终为容器bing方法),而$this-&gt;app[key]，这种取值运算会触发offsetGet方法(最终为容器make方法)。<br><blockquote><footer><strong>ArrayAccess接口</strong><cite><a href="http://php.net/manual/en/class.arrayaccess.php" target="_blank" rel="noopener">php.net/manual/en/class.arrayaccess.php</a></cite></footer></blockquote><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">share</span><span class="params">(Closure $closure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($container)</span> <span class="title">use</span> <span class="params">($closure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> $object;</span><br><span class="line">        <span class="keyword">if</span> (is_null($object)) &#123;</span><br><span class="line">            $object = $closure($container);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $object;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;首次执行make 时, router 所绑定的闭包函数的static $object 会变成 new Router($this-&gt;app[‘events’], $this-&gt;app)，再次make 会直接返回 已存在的实例$object。与singleton比较相似。</p><h4 id="注册基本路径"><a href="#注册基本路径" class="headerlink" title="注册基本路径"></a>注册基本路径</h4><p>&emsp;&emsp;将基本文件路径存入容器的instances[]中,方便通过make(‘path’)直接获取<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindPathsInContainer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path'</span>, <span class="keyword">$this</span>-&gt;path()); <span class="comment">// $this-&gt;basePath.DIRECTORY_SEPARATOR.'app'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ([<span class="string">'base'</span>, <span class="string">'config'</span>, <span class="string">'database'</span>, <span class="string">'lang'</span>, <span class="string">'public'</span>, <span class="string">'storage'</span>] <span class="keyword">as</span> $path) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.'</span>.$path, <span class="keyword">$this</span>-&gt;&#123;$path.<span class="string">'Path'</span>&#125;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div style="height: 200px;padding: 0px 0px; "><br>    <img src="/images/base_instance.png" align="left" style="margin:-20px 0px auto 0px;float: left;"><br>    <div style="float: right; width:400px;height: 180px;margin-top: -70px; text-align:left;"><br>        app实例初始化结束后,其instances属性:<br>        ①app自身<br>        ②容器实例<br>        ③事件实例<br>        ④基本文件根路径<br>    </div><br></div><p>最后绑定核心类、控制台、异常处理类,这种写法的实质是 如通过执行make(‘Illuminate\Contracts\Http\Kernel’),返回App\Http\Kernel类<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    App\Http\Kernel::<span class="class"><span class="keyword">class</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    App\Console\Kernel::<span class="class"><span class="keyword">class</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::<span class="class"><span class="keyword">class</span>,</span></span><br><span class="line">    App\Exceptions\Handler::<span class="class"><span class="keyword">class</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> $app;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app实例 </tag>
            
            <tag> singleton方法 </tag>
            
            <tag> share方法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>容器与控制反转</title>
      <link href="/2018/07/07/container/"/>
      <url>/2018/07/07/container/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;由于这些都是一些概念性的内容，为了方便理解，我们需要尽可能的用具象的东西来说明。在此之前，先简单说明一下<font color="LightCoral">控制反转</font> 和 <font color="LightCoral">依赖注入</font>：<br><blockquote><p>控制反转 (Inversion Of Control,Ioc)，是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。依赖注入 (Dependency Injection, DI),只是其实现方式的其中一种，还有一种叫”依赖查找”(Dependency Lookup)。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p></blockquote>关于依赖查找，个人表示并没研究过，这里我们主要理解 依赖注入 。下面通过比较用 <font color="LightSlateBlue">传统方式、工厂模式、容器 </font>去实例化类，并满足该类所有属性需求 ，实现过程中的不同，从而理解容器。<br><a id="more"></a><br>假设我们现在有一个目标：制造一辆山寨汽车 Car</p><ul><li>需要有轮胎 Tyre</li><li>需要有窗户 window</li><li>需要有座椅 Seat<h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;tyre = <span class="keyword">new</span> Tyre();</span><br><span class="line"><span class="keyword">$this</span>-&gt;window = <span class="keyword">new</span> window();</span><br><span class="line"><span class="keyword">$this</span>-&gt;seat = <span class="keyword">new</span> Seat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//轮胎类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//窗户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//座椅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seat</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>关于这种传统模式的问题:<br>① 在实际情况中，一个类如果有很多个需要实例化的属性,那我们就需要一直使用new 运算符，严重影响代码可读性<br>② 因为某种原因,其中一个属性类名发生了变化,如Seat变成了Chair,那么只要有用到new Seat的地方都要改<br>③ 如果属性类实例化时，还需要其他实例（依赖注入）,怎么办,按传统写法可能就变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;tyre = <span class="keyword">new</span> Tyre();</span><br><span class="line"></span><br><span class="line">$sander = <span class="keyword">new</span> Sander();</span><br><span class="line">$glass = <span class="keyword">new</span> Glass($sander);  <span class="comment">//窗户需要打磨</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;window = <span class="keyword">new</span> window($glass); <span class="comment">// 窗户需要玻璃, 如果还有更深层次呢?</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;seat = <span class="keyword">new</span> Seat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//轮胎类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//窗户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($glass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;glass = $glass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//座椅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seat</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//玻璃</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glass</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($sander)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;sander = $sander;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打磨机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sander</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;factory = <span class="keyword">new</span> Factory();</span><br><span class="line"></span><br><span class="line">$list = [<span class="string">'Tyre'</span>,<span class="string">'Window'</span>,<span class="string">'Seat'</span>];</span><br><span class="line"><span class="keyword">foreach</span>($list <span class="keyword">as</span> $class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;$class = <span class="keyword">$this</span>-&gt;factory-&gt;make($class,<span class="string">'param'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($class,$param)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> $class($param);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂模式可以很好的解决传统模式中的①和②两个问题,工厂模式一般就已经可以满足正常开发需求;</p><h4 id="容器Container"><a href="#容器Container" class="headerlink" title="容器Container"></a>容器Container</h4><p>真正的主角登场。容器，顾名思义一个可以装东西的’盒子’。而里面装的是什么，正是我们需要考究的。<br><em>还是用制造山寨汽车举例，我需要一个容器，希望里面有轮胎、窗户、座椅，这样我可以直接用。那么我用了，下一个制造者可能有没得用了,当然这只是一种粗浅的比喻 。</em>  <font color="#f56954">最好的解决办法就是容器里有的是制造轮胎、窗户的方法,我通过该方法，可以获取想要的实例。而容器本身就是一种高级工厂模式。</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">$protected $bindings;  <span class="comment">// 存放实例制造所需的方法</span></span><br><span class="line">$protected $instances; <span class="comment">//存放已经实例化好的类</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, Closure $concrete)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings[$abstract] = $concrete;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, $param=[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract]))&#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;bindings[$abstract];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $concrete(<span class="keyword">$this</span>,$param);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$container = <span class="keyword">new</span> Container();</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">'tyre'</span>,<span class="function"><span class="keyword">function</span><span class="params">($container,$param)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Tyre;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(<span class="string">'window'</span>,<span class="function"><span class="keyword">function</span><span class="params">($container,$param)</span></span>&#123;</span><br><span class="line">$glass = $container-&gt;make($param); <span class="comment">//通过容器实例化,并注入依赖</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> window($glass);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$car = <span class="keyword">new</span> Car();</span><br><span class="line">$car-&gt;tyre = $container-&gt;make(<span class="string">'tyre'</span>);</span><br><span class="line">$car-&gt;window = $container-&gt;make(<span class="string">'window'</span>,<span class="string">'glass'</span>);</span><br></pre></td></tr></table></figure></p><p>容器的简单形式就算完成。面临最大的问题就是依赖注入的处理不够好</p><h4 id="依赖自动注入"><a href="#依赖自动注入" class="headerlink" title="依赖自动注入"></a>依赖自动注入</h4><p>框架中容器一般是不会为小的属性类(如Window,Tyre,Glass等)单独绑定实现方法的。这种就会通过ReflectionClass类来实现<br><blockquote><footer><strong>PHP反射类文档</strong><cite><a href="http://www.php.net/manual/en/book.reflection.php" target="_blank" rel="noopener">www.php.net/manual/en/book.reflection.php</a></cite></footer></blockquote></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($container)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;container = $container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//window 在容器中并未绑定,通过Reflection来实现</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;window = <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'window'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;window;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTyre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;tyre = <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'tyre'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Glass $glass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;glass = $glass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($cons = <span class="number">123</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cons = $cons;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $bindings;</span><br><span class="line"><span class="keyword">protected</span> $instances;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, Closure $concrete)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_null($concrete)) &#123;</span><br><span class="line">            $concrete = $abstract;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定闭包</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;bindings[$abstract] = $concrete;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里 拿 'window'举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($concrete ,array $parameters=[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$concrete]))</span><br><span class="line">&#123;</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;bindings[$concrete];</span><br><span class="line"><span class="keyword">return</span> $concrete(<span class="keyword">$this</span>, $parameters);</span><br><span class="line">&#125;</span><br><span class="line">$reflector = <span class="keyword">new</span> ReflectionClass($concrete);</span><br><span class="line">        <span class="comment">//反射类是否可以实例化（如接口）</span></span><br><span class="line">        <span class="keyword">if</span> (! $reflector-&gt;isInstantiable()) &#123;</span><br><span class="line">            $message = <span class="string">"该反射类不可实例化"</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($message);</span><br><span class="line">        &#125;</span><br><span class="line">        $constructor = $reflector-&gt;getConstructor();</span><br><span class="line">        <span class="keyword">if</span> (is_null($constructor)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line">        $dependencies = $constructor-&gt;getParameters(); <span class="comment">//获取构造函数被注入的依赖</span></span><br><span class="line"></span><br><span class="line">        $instances = []; <span class="comment">//获取依赖实例</span></span><br><span class="line">        <span class="keyword">foreach</span> ($dependencies <span class="keyword">as</span> $parameter) &#123;</span><br><span class="line">        $dependency = $parameter-&gt;getClass();</span><br><span class="line">        <span class="keyword">if</span>(is_null($dependency))</span><br><span class="line">        &#123;</span><br><span class="line">        $instances[] = $parameter-&gt;getDefaultValue();</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        $instances[] =  <span class="keyword">$this</span>-&gt;make($parameter-&gt;getClass()-&gt;name); <span class="comment">//递归,实例化所有依赖</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> $reflector-&gt;newInstanceArgs($instances);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> Container();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line">$c-&gt;bind(<span class="string">'car'</span>,<span class="function"><span class="keyword">function</span><span class="params">($c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car($c);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$car = $c-&gt;make(<span class="string">'car'</span>);</span><br><span class="line">$window = $car-&gt;getWindow(); </span><br><span class="line">var_dump($window);</span><br></pre></td></tr></table></figure><p>容器的概念理解好后,下一篇分享 application 类的实例化</p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> 控制反转 </tag>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Application.php的引入</title>
      <link href="/2018/07/07/app-require/"/>
      <url>/2018/07/07/app-require/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp; <font color="red">再次说明：整个代码学习都是基于index.php，进行代码逐行分析。 根据报错，对照完整的源码进行文件补充。</font></p><h5 id="引入composer自动载入"><a href="#引入composer自动载入" class="headerlink" title="引入composer自动载入"></a>引入composer自动载入</h5><p>关于composer自动载入包的安装，只要的我们的根目录下新建composer.json,并写入<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"require" : &#123; </span><br><span class="line">"php" : "&gt;=5.5.9"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 然后执行 <em>composer install</em> 命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****  当前文件位置 index.php   ****/</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****  当前文件位置 bootstrap/autoload.php  ****/</span></span><br><span class="line">define(<span class="string">'LARAVEL_START'</span>, microtime(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;  <span class="comment">// 引入Composer autoload</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取编译缓存，所有用到的类及方法的集合文件</span></span><br><span class="line"></span><br><span class="line">$compiledPath = <span class="keyword">__DIR__</span>.<span class="string">'/cache/compiled.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($compiledPath)) &#123;    </span><br><span class="line">    <span class="keyword">require</span> $compiledPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到这里,类文件的自动载入工作就算基本完成了。<br><a id="more"></a></p><h5 id="引入Application-php"><a href="#引入Application-php" class="headerlink" title="引入Application.php"></a>引入Application.php</h5><p>接下来会看到的代码就是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;首先需要创建 <em>vendor/laravel/framework/src/Illuminate/Foundation/Application.php </em>文件(建议为空类,测试自动引入是否成功)。那么通过composer自动引入Application.php？ 通过composer.json，定义路径,然后执行 <em>composer dump-autoload </em>命令。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"autoload"</span>: &#123;</span><br><span class="line">       <span class="string">"classmap"</span>: [</span><br><span class="line">           <span class="string">"vendor/laravel/framework/src/Illuminate"</span>,</span><br><span class="line">           <span class="string">"app"</span></span><br><span class="line"></span><br><span class="line">       ],</span><br><span class="line">       <span class="string">"files"</span> : [</span><br><span class="line">       <span class="string">"vendor/laravel/framework/src/Illuminate/Support/helpers.php"</span>,</span><br><span class="line">           <span class="string">"vendor/laravel/framework/src/Illuminate/Foundation/helpers.php"</span></span><br><span class="line">       ],</span><br><span class="line">       <span class="string">"psr-4"</span>: &#123;</span><br><span class="line">           <span class="string">"App\\"</span>: <span class="string">"app/"</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>之后所有的文件载入不再做赘述,可自行参考以下资料:</p><blockquote><footer><strong>PHP中的PSR规范</strong><cite><a href="https://https://www.jianshu.com/p/b33155c15343" target="_blank" rel="noopener">https://www.jianshu.com/p/b33155c15343</a></cite></footer></blockquote><blockquote><footer><strong>composer文档</strong><cite><a href="https://docs.phpcomposer.com/01-basic-usage.html#Autoloading" target="_blank" rel="noopener">docs.phpcomposer.com/01-basic-usage.html#Autoloading</a></cite></footer></blockquote>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer自动引入 </tag>
            
            <tag> autoload </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>框架目录结构</title>
      <link href="/2018/07/06/tree-directory/"/>
      <url>/2018/07/06/tree-directory/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;laravel 框架按最简单的目录结构理解就是 <strong>核心文件目录</strong> 和 <strong>插件文件目录</strong>。假设这所有的目录结构，最开始我们是并不清楚的，然后随着index.php的运行,报错的出现与不断解决，整个目录结构及用途就会一点点慢慢清晰起来。<br>&emsp;&emsp;当运行，第一个报错肯定是 bootstrap/autoload.php  文件不存在, 然后我们就按照另一份源码缺哈补哈。随着这个报错的解决，自然就会清楚，app\bootstrap文件夹，到目前为止有提供composer 自动载入类的作用。下面是整个框架的目录结构图<br><a id="more"></a></p><h4 id="核心文件目录"><a href="#核心文件目录" class="headerlink" title="核心文件目录"></a>核心文件目录</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">├── laravel 根目录</span><br><span class="line">├── app</span><br><span class="line">│   ├──<span class="built_in"> Console</span>artisan控制台</span><br><span class="line">│   ├── Events事件注册</span><br><span class="line">│   ├── Exceptions异常处理</span><br><span class="line">│   ├── Httphttp处理</span><br><span class="line">│   |   ├── Controllers  控制器</span><br><span class="line">│   |   ├── Middleware  中间件</span><br><span class="line">|   |   ├── Requests 表单请求类FormRequest,用于表单数据快捷验证</span><br><span class="line">│   |   └── routes     路由文件</span><br><span class="line">│   ├── Jobs队列任务</span><br><span class="line">│   ├── Listeners事件监听</span><br><span class="line">│   ├── Policies用户操作授权控制</span><br><span class="line">│   └── Providers基本服务提供类</span><br><span class="line">│   └── User.php 默认用户认证模型</span><br><span class="line">|</span><br><span class="line">├── bootstrap  项目启动文件</span><br><span class="line">│   ├── cache  启动文件缓存，主要是services.php,记录服务提供类的即时、延迟、特定加载信息</span><br><span class="line">│   ├── app.php 创建整个项目Application类实例</span><br><span class="line">│   └── autoload 引入composer自动载入类</span><br><span class="line">|</span><br><span class="line">├──<span class="built_in"> config </span> 配置文件</span><br><span class="line">|</span><br><span class="line">├── database数据库迁移</span><br><span class="line">│   </span><br><span class="line">├── public公共资源目录，包含入口文件及资源文件，js、css、image等</span><br><span class="line">|</span><br><span class="line">├── resources 视图文件</span><br><span class="line">│   </span><br><span class="line">├── storage</span><br><span class="line">│   ├── app 其他文件存储目录</span><br><span class="line">│   ├── framework</span><br><span class="line">|   |   ├── cache 文件缓存目录</span><br><span class="line">|   |   ├── sessions 会话缓存目录</span><br><span class="line">|   |   └── views视图缓存目录</span><br><span class="line">│   └── logs 日志文件默认存储目录</span><br><span class="line">├── vendor 拓展文件目录</span><br><span class="line">└── .env 环境变量配置 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拓展文件目录"><a href="#拓展文件目录" class="headerlink" title="拓展文件目录"></a>拓展文件目录</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">├── laravel/vendor</span><br><span class="line">├── bin        作为php-parse,phpunit,phpspec,psysh 指令执行目录</span><br><span class="line">├── classpreloader用于生成包含特定用例所需的所有类的单个PHP脚本,不依赖于自动加载</span><br><span class="line">├── composer<span class="string">"composer自动加载类"</span></span><br><span class="line">├── danielstjules  具有多字节支持的字符串操作库,如strtoupper('fòôbàř');</span><br><span class="line">├── dnoegel      dnoegel/php-xdg-base-dir, XDG目录规范</span><br><span class="line">├── doctrinewww.doctrine-project.org 用于数据库迁移schema生成,数据字段修改</span><br><span class="line">├── fzaninottofzaninotto/faker 用于生成测试数据的PHP库</span><br><span class="line">├── hamcrest一个匹配Hamcrest的官方PHP端口的拓展，具体用途不详</span><br><span class="line">├── jakub-onderka控制台高亮PHP代码</span><br><span class="line">├── jeremeamia用于序列化闭包和匿名函数的PHP库。</span><br><span class="line">├── laravel <span class="string">"最核心拓展"</span></span><br><span class="line">├── league   <span class="string">"league/flysystem 本地磁盘文件读写驱动"</span></span><br><span class="line">├── mockery        PHP模拟对象框架,用于PHP单元测试</span><br><span class="line">├── monolog        <span class="string">"php日志记录库,可以日志发送至files, sockets, inboxes, databases等"</span></span><br><span class="line">├── mtdowlingPHP cron表达式解析器</span><br><span class="line">├── nestbot    nesbot/carbon 时间处理插件</span><br><span class="line">├── nikic    包名nikic/php-parser。 PHP词法分析、语法分析，生成一颗抽象语法树。</span><br><span class="line">|                PHP内置函数token_get_all()可进行词法分析。在视图编译会用到</span><br><span class="line">├── paragonie</span><br><span class="line">├── phpdocumentor<span class="string">"paragonie/random_compat 安全码生成库,如默认session_id 生成"</span></span><br><span class="line">├── phpspec       可以按PSR标准创建文件夹结构(我目前所知)</span><br><span class="line">├── phpunit     php单元测试 </span><br><span class="line">├── predis   redis拓展</span><br><span class="line">├── psr            <span class="string">"psr/log ,定制日志记录接口规范"</span></span><br><span class="line">├── psys             psy/psysh php交互式控制台, 可以写php代码直接运行</span><br><span class="line">├── sebastian     不知道不明了 (°ー°〃)</span><br><span class="line">├── swiftmailer    Mail 邮件发送插件</span><br><span class="line">├── symfony     <span class="string">"symfony全家桶,在vender/laravel中require 。 重要插件库"</span></span><br><span class="line">├── vlucas    <span class="string">"vlucas/phpdotenv 用于ENV环境变量的读取及设置"</span></span><br><span class="line">└── webmozart      通过Assert来测试方法的输入和输出,有点类似于<span class="keyword">Node</span>.<span class="title">js</span> 的Assert</span><br></pre></td></tr></table></figure><h5 id="framework目录"><a href="#framework目录" class="headerlink" title="framework目录"></a>framework目录</h5><p><font color="#f56954" size="3">/vendor/laravel/framework 可以说是整个laravel框架最最核心的目录,vendor目录下所有其他拓展基本都是为其服务<font><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">├── laravel/vendor/laravel/framework</span><br><span class="line">├── composer.json     '记录了核心常用插件使用信息'</span><br><span class="line">└── src  遵循PSR-4目录规范</span><br><span class="line">    └── Illuminate       </span><br><span class="line">        ├── Auth           用户认证，Access 、Password、AuthManager</span><br><span class="line">        ├── Broadcasting  广播(没使用过)</span><br><span class="line">        ├── Bus          任务分配(没使用过)</span><br><span class="line">        ├── <span class="keyword">Cache</span>        缓存操作类</span><br><span class="line">        ├── Config          配置操作类</span><br><span class="line">        ├── Console        控制台</span><br><span class="line">        ├── <span class="keyword">Container</span>  <span class="string">'容器(实现Ioc),框架核心设计思想之一'</span></span><br><span class="line">        ├── Contracts  <span class="string">'契约类(interface),定义app的几乎所有接口规范'</span></span><br><span class="line">        ├── Cookie        响应头Cookie</span><br><span class="line">        ├── <span class="keyword">Database</span>   数据库</span><br><span class="line">        ├── Enctyption    加密，解密类,如用于session_id加密和解密</span><br><span class="line">        ├── <span class="keyword">Events</span>      事件处理</span><br><span class="line">        ├── Filesystem  文件处理</span><br><span class="line">        ├── Foundation  <span class="string">'基本文件类,如Application类'</span></span><br><span class="line">        ├── Hashing       <span class="keyword">hash</span>加密类</span><br><span class="line">        ├── <span class="keyword">Http</span>      request,response 处理      </span><br><span class="line">        ├── <span class="keyword">log</span>       <span class="keyword">Log</span>\Write类</span><br><span class="line">        ├── Mail    邮件处理</span><br><span class="line">        ├── Pagination  分页</span><br><span class="line">        ├── Pipenation  <span class="string">'管道类,核心设计思想之一，主要用于middleware处理'</span></span><br><span class="line">        ├── Queue     任务队列</span><br><span class="line">        ├── Redis     <span class="string">'Redis操作，底层默认是必须安装 predis插件的'</span></span><br><span class="line">        ├── Routing     路由</span><br><span class="line">        ├── <span class="keyword">Session</span>     会话</span><br><span class="line">        ├── Support    其他帮助类,如帮助函数,视图错误信息处理</span><br><span class="line">        ├── <span class="keyword">Translation</span>   验证信息转换,需要resources/lang 语言包</span><br><span class="line">        ├── <span class="keyword">Validation</span>    数据验证类</span><br><span class="line">        └── <span class="keyword">View</span>      视图处理，模板编译</span><br><span class="line"></span><br></pre></td></tr></table></figure></font></font></p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel目录结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>laravel源码(开篇)</title>
      <link href="/2018/07/05/summary/"/>
      <url>/2018/07/05/summary/</url>
      <content type="html"><![CDATA[<h4 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h4><p>&emsp;&emsp;想要真正了解一套框架，是需要花很多心思和时间的，就像想要了解一个的人。<font>坚持源于喜欢，仅此而已！</font><br>&emsp;&emsp;我个人的学习方法就是拿public\index.php，也就是项目的入口文件当做突破口，就当做没有任何手册。当然在此之前，个人觉得还是要有一定的框架使用经验。此学习分享纯属个人见解，不好之处欢迎批评指正!<br>&emsp;&emsp;<em>版本说明: laravel5.1, php 5.6.4</em><br><a id="more"></a><br>&emsp;&emsp; <em>index.php 从头到尾不会超过10行代码,总流程 <font color="#0099ff">创建App实例、接收request、获取route、返回response</font>，结束</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;      </span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send(); <span class="comment">// 发送响应</span></span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>&emsp;&emsp;准备一份laravel 源码，再准备一个自己的项目。最开始我们的项目是这样的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── app 根目录</span><br><span class="line">    └── public  </span><br><span class="line">        ├── index<span class="selector-class">.php</span>  拷贝源码</span><br><span class="line">        └── <span class="selector-class">.htaccess</span>  拷贝源码</span><br></pre></td></tr></table></figure><br>将web服务器指定到该目录下,本地执行。<font color="LightCoral" size="4">随着系统报错，故事就开始了…</font> </p>]]></content>
      
      <categories>
          
          <category> laravel源码学习分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
